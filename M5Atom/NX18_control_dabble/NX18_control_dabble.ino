#include "M5Atom.h"
#include <Wire.h>          // I2C setting
#include <PCA9685.h>       //for PCA9685
#include <DabbleESP32.h>

//bool IMU6886Flag = false;  //今回はなくても良い

int angZero[] = {86,97,81,85,89,100,94,100,110,86,96,95,90};
int angHome[] = {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,0};
int ang0[13];
int ang1[13];
int ang_b[13];
char ang_c[13];
float ts=40;  //40msごとに次のステップに移る
float td=10;   //10回で分割

// Forward Step
int f_s[39][13]={
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,0},
  {0,5,-11,18,-4,-5,0,11,11,-17,4,-11,0},
  {0,10,-11,17,-4,-10,0,16,10,-14,5,-16,0},
  {0,13,-13,21,-2,-13,0,18,9,-13,6,-18,0},
  {0,15,-11,30,8,-15,0,18,9,-13,6,-18,0},
  {0,17,-8,38,20,-17,0,18,9,-13,6,-18,0},
  {0,18,-1,40,29,-18,0,18,9,-13,6,-18,0},
  {0,17,0,36,26,-17,0,18,9,-13,6,-18,0},
  {0,15,1,27,18,-15,0,18,9,-13,6,-18,0},
  {0,13,3,18,12,-13,0,18,9,-13,6,-18,0},
  {0,11,2,19,11,-11,0,16,11,-14,6,-16,0},
  {0,5,-1,21,10,-5,0,11,14,-16,8,-11,0},
  {0,-3,-4,17,4,3,0,3,19,-17,11,-3,0},
  {0,-11,-7,16,-1,11,0,-5,22,-17,15,5,0},
  {0,-16,-9,14,-4,16,0,-10,23,-15,19,10,0},
  {0,-18,-9,13,-6,18,0,-13,23,-14,20,13,0},
  {0,-18,-9,13,-6,18,0,-13,27,-18,18,13,0},
  {0,-18,-9,13,-6,18,0,-15,29,-29,10,15,0},
  {0,-18,-9,13,-6,18,0,-17,29,-39,0,17,0},
  {0,-18,-9,13,-6,18,0,-18,24,-43,-9,18,0},
  {0,-18,-9,13,-6,18,0,-17,15,-39,-14,17,0},
  {0,-18,-9,13,-6,18,0,-15,5,-29,-14,15,0},
  {0,-16,-10,15,-5,16,0,-13,-3,-18,-12,13,0},
  {0,-16,-11,14,-6,16,0,-11,-2,-19,-11,11,0},
  {0,-11,-14,16,-8,11,0,-5,1,-21,-10,5,0},
  {0,-3,-19,17,-11,3,0,3,4,-17,-4,-3,0},
  {0,5,-22,17,-15,-5,0,11,7,-16,1,-11,0},
  {0,10,-23,15,-19,-10,0,16,9,-14,4,-16,0},
  {0,13,-23,14,-20,-13,0,18,9,-13,6,-18,0},
  {0,13,-27,18,-18,-13,0,18,9,-13,6,-18,0},
  {0,18,-28,27,-10,-18,0,18,9,-13,6,-18,0},
  {0,21,-28,38,0,-21,0,18,9,-13,6,-18,0},
  {0,23,-23,41,8,-23,0,18,9,-13,6,-18,0},
  {0,21,-22,38,7,-21,0,18,9,-13,6,-18,0},
  {0,18,-17,29,2,-18,0,18,9,-13,6,-18,0},
  {0,16,-12,20,-3,-16,0,18,9,-13,6,-18,0},
  {0,11,-13,22,-2,-11,0,16,10,-14,5,-16,0},
  {0,5,-14,23,-1,-5,0,11,11,-17,4,-11,0},
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,0}};
// Left Step
int l_s[25][13]={
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,0},
  {0,-11,-11,17,-4,11,0,-5,11,-18,4,5,10},
  {0,-16,-10,14,-5,16,0,-10,11,-17,4,10,10},
  {0,-18,-9,13,-6,18,0,-13,13,-21,2,13,10},
  {0,-18,-9,13,-6,18,0,-15,18,-30,-3,15,10},
  {0,-18,-9,13,-6,18,0,-17,22,-40,-7,17,10},
  {10,-18,-9,13,-6,18,-10,-18,24,-43,-9,18,10},
  {10,-18,-9,13,-6,18,-10,-17,22,-40,-7,17,10},
  {10,-18,-9,13,-6,18,-10,-15,18,-30,-3,15,10},
  {10,-18,-9,13,-6,18,-10,-13,13,-21,2,13,10},
  {10,-16,-10,14,-5,16,-10,-11,13,-22,2,11,10},
  {10,-11,-11,17,-4,11,-10,-5,14,-23,1,5,10},
  {10,-3,-12,18,-3,3,-10,3,12,-18,3,-3,10},
  {10,5,-11,18,-4,-5,-10,11,11,-17,4,-11,10},
  {10,10,-11,17,-4,-10,-10,16,10,-14,5,-16,10},
  {10,13,-13,21,-2,-13,-10,18,9,-13,6,-18,10},
  {10,15,-18,30,3,-15,-10,18,9,-13,6,-18,10},
  {10,17,-22,40,7,-17,-10,18,9,-13,6,-18,10},
  {0,18,-24,43,9,-18,0,18,9,-13,6,-18,0},
  {0,17,-22,40,7,-17,0,18,9,-13,6,-18,0},
  {0,15,-18,30,3,-15,0,18,9,-13,6,-18,0},
  {0,13,-13,21,-2,-13,0,18,9,-13,6,-18,0},
  {0,11,-13,22,-2,-11,0,16,10,-14,5,-16,0},
  {0,5,-14,23,-1,-5,0,11,11,-17,4,-11,0},
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,0}};
// Right Step
int r_s[25][13]={
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,0},
  {0,5,-11,18,-4,-5,0,11,11,-17,4,-11,-10},
  {0,10,-11,17,-4,-10,0,16,10,-14,5,-16,-10},
  {0,13,-13,21,-2,-13,0,18,9,-13,6,-18,-10},
  {0,15,-18,30,3,-15,0,18,9,-13,6,-18,-10},
  {0,17,-22,40,7,-17,0,18,9,-13,6,-18,-10},
  {10,18,-24,43,9,-18,-10,18,9,-13,6,-18,-10},
  {10,17,-22,40,7,-17,-10,18,9,-13,6,-18,-10},
  {10,15,-18,30,3,-15,-10,18,9,-13,6,-18,-10},
  {10,13,-13,21,-2,-13,-10,18,9,-13,6,-18,-10},
  {10,11,-13,22,-2,-11,-10,16,10,-14,5,-16,-10},
  {10,5,-14,23,-1,-5,-10,11,11,-17,4,-11,-10},
  {10,-3,-12,18,-3,3,-10,3,12,-18,3,-3,-10},
  {10,-11,-11,17,-4,11,-10,-5,11,-18,4,5,-10},
  {10,-16,-10,14,-5,16,-10,-10,11,-17,4,10,-10},
  {10,-18,-9,13,-6,18,-10,-13,13,-21,2,13,-10},
  {10,-18,-9,13,-6,18,-10,-15,18,-30,-3,15,-10},
  {10,-18,-9,13,-6,18,-10,-17,22,-40,-7,17,-10},
  {0,-18,-9,13,-6,18,0,-18,24,-43,-9,18,0},
  {0,-18,-9,13,-6,18,0,-17,22,-40,-7,17,0},
  {0,-18,-9,13,-6,18,0,-15,18,-30,-3,15,0},
  {0,-18,-9,13,-6,18,0,-13,13,-21,2,13,0},
  {0,-16,-10,14,-5,16,0,-11,13,-22,2,11,0},
  {0,-11,-11,17,-4,11,0,-5,14,-23,1,5,0},
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,0}};
// Back Step
int b_s[39][13]={
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,0},
  {0,5,-11,18,-4,-5,0,11,11,-17,4,-11,0},
  {0,10,-11,17,-4,-10,0,16,10,-14,5,-16,0},
  {0,13,-13,21,-2,-13,0,18,9,-13,6,-18,0},
  {0,15,-23,30,-4,-15,0,18,9,-13,6,-18,0},
  {0,17,-35,38,-7,-17,0,18,9,-13,6,-18,0},
  {0,18,-44,40,-14,-18,0,18,9,-13,6,-18,0},
  {0,17,-41,36,-15,-17,0,18,9,-13,6,-18,0},
  {0,15,-33,27,-16,-15,0,18,9,-13,6,-18,0},
  {0,13,-27,18,-18,-13,0,18,9,-13,6,-18,0},
  {0,11,-26,19,-17,-11,0,16,9,-14,4,-16,0},
  {0,5,-25,21,-14,-5,0,11,7,-16,1,-11,0},
  {0,-3,-19,17,-11,3,0,3,4,-17,-4,-3,0},
  {0,-11,-14,16,-8,11,0,-5,0,-17,-7,5,0},
  {0,-16,-11,14,-6,16,0,-10,-4,-15,-8,10,0},
  {0,-18,-9,13,-6,18,0,-13,-5,-14,-8,13,0},
  {0,-18,-9,13,-6,18,0,-13,-3,-18,-12,13,0},
  {0,-18,-9,13,-6,18,0,-15,5,-29,-14,15,0},
  {0,-18,-9,13,-6,18,0,-17,15,-39,-14,17,0},
  {0,-18,-9,13,-6,18,0,-18,24,-43,-9,18,0},
  {0,-18,-9,13,-6,18,0,-17,29,-39,0,17,0},
  {0,-18,-9,13,-6,18,0,-15,29,-29,10,15,0},
  {0,-18,-9,13,-6,18,0,-13,27,-18,18,13,0},
  {0,-16,-9,14,-4,16,0,-11,26,-19,17,11,0},
  {0,-11,-7,16,-1,11,0,-5,25,-21,14,5,0},
  {0,-3,-4,17,4,3,0,3,19,-17,11,-3,0},
  {0,5,0,17,7,-5,0,11,14,-16,8,-11,0},
  {0,10,4,15,8,-10,0,16,11,-14,6,-16,0},
  {0,13,5,14,8,-13,0,18,9,-13,6,-18,0},
  {0,13,3,18,12,-13,0,18,9,-13,6,-18,0},
  {0,15,-5,29,14,-15,0,18,9,-13,6,-18,0},
  {0,17,-15,39,14,-17,0,18,9,-13,6,-18,0},
  {0,18,-24,43,9,-18,0,18,9,-13,6,-18,0},
  {0,17,-22,40,7,-17,0,18,9,-13,6,-18,0},
  {0,15,-18,30,3,-15,0,18,9,-13,6,-18,0},
  {0,13,-13,21,-2,-13,0,18,9,-13,6,-18,0},
  {0,11,-13,22,-2,-11,0,16,10,-14,5,-16,0},
  {0,5,-14,23,-1,-5,0,11,11,-17,4,-11,0},
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,0}};
// Left Side Step
int ls_s[25][13]={
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,0},
  {0,-11,-11,17,-4,11,0,-5,11,-18,4,5,0},
  {0,-16,-10,14,-5,16,0,-10,11,-17,4,10,0},
  {0,-18,-9,13,-6,18,0,-13,13,-21,2,13,0},
  {0,-18,-9,13,-6,18,0,-15,18,-30,-3,15,0},
  {0,-18,-9,13,-6,18,0,-17,22,-40,-7,17,0},
  {0,-18,-9,13,-6,18,0,-18,24,-43,-9,18,0},
  {0,-18,-9,13,-6,18,0,-35,17,-29,-2,35,0},
  {0,-18,-9,13,-6,18,0,-31,13,-21,2,31,0},
  {0,-18,-9,13,-6,18,0,-28,9,-12,6,28,0},
  {0,-16,-10,14,-5,16,0,-26,9,-14,6,26,0},
  {0,-11,-11,17,-4,11,0,-21,11,-17,4,21,0},
  {0,5,-11,18,-4,-5,0,-5,11,-18,4,5,0},
  {0,20,-9,13,-6,-20,0,11,11,-17,4,-11,0},
  {0,25,-7,9,-8,-25,0,14,10,-16,5,-14,0},
  {0,28,-9,12,-6,-28,0,18,9,-13,6,-18,0},
  {0,31,-13,21,-2,-31,0,18,9,-13,6,-18,0},
  {0,35,-17,29,2,-35,0,18,9,-13,6,-18,0},
  {0,37,-19,32,4,-37,0,18,9,-13,6,-18,0},
  {0,17,-22,40,7,-17,0,18,9,-13,6,-18,0},
  {0,15,-18,30,3,-15,0,18,9,-13,6,-18,0},
  {0,13,-13,21,-2,-13,0,18,9,-13,6,-18,0},
  {0,11,-13,22,-2,-11,0,16,10,-14,5,-16,0},
  {0,5,-14,23,-1,-5,0,11,11,-17,4,-11,0},
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,0}};
// Right Side Step
int rs_s[25][13]={
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,0},
  {0,5,-11,18,-4,-5,0,11,11,-17,4,-11,0},
  {0,10,-11,17,-4,-10,0,16,10,-14,5,-16,0},
  {0,13,-13,21,-2,-13,0,18,9,-13,6,-18,0},
  {0,15,-18,30,3,-15,0,18,9,-13,6,-18,0},
  {0,17,-22,40,7,-17,0,18,9,-13,6,-18,0},
  {0,18,-24,43,9,-18,0,18,9,-13,6,-18,0},
  {0,32,-18,32,3,-32,0,18,9,-13,6,-18,0},
  {0,28,-14,23,-1,-28,0,18,9,-13,6,-18,0},
  {0,25,-10,14,-5,-25,0,18,9,-13,6,-18,0},
  {0,23,-10,16,-5,-23,0,16,10,-14,5,-16,0},
  {0,21,-11,17,-4,-21,0,11,11,-17,4,-11,0},
  {0,3,-12,18,-3,-3,0,-3,12,-18,3,3,0},
  {0,-11,-11,17,-4,11,0,-17,10,-14,5,17,0},
  {0,-16,-10,14,-5,16,0,-22,8,-11,7,22,0},
  {0,-18,-9,13,-6,18,0,-25,10,-14,5,25,0},
  {0,-18,-9,13,-6,18,0,-28,14,-23,1,28,0},
  {0,-18,-9,13,-6,18,0,-32,18,-32,-3,32,0},
  {0,-18,-9,13,-6,18,0,-34,20,-35,-5,34,0},
  {0,-18,-9,13,-6,18,0,-17,22,-40,-7,17,0},
  {0,-18,-9,13,-6,18,0,-15,18,-30,-3,15,0},
  {0,-18,-9,13,-6,18,0,-13,13,-21,2,13,0},
  {0,-16,-10,14,-5,16,0,-11,13,-22,2,11,0},
  {0,-11,-11,17,-4,11,0,-5,14,-23,1,5,0},
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,0}};
// Left Head Step
int lh_s[8][13]={
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,0},
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,5},
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,10},
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,15},
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,15},
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,10},
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,5},
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,0}};
// Right Head Step
int rh_s[8][13]={
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,0},
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,-5},
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,-10},
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,-15},
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,-15},
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,-10},
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,-5},
  {0,-3,-12,18,-3,3,0,3,12,-18,3,-3,0}};
  
int delection = 0;

//PCA9685のアドレス指定
PCA9685 pwm = PCA9685(0x40);

#define SERVOMIN 104            //Min pulse width (12bit 500μs) 
#define SERVOMAX 512            //Max pulse width (12bit 2500μs) 

void servo_write(int ch, int ang){
  ang = map(ang, 0, 180, SERVOMIN, SERVOMAX); //angle（0～180）-> pulse width（150～500）
  pwm.setPWM(ch, 0, ang);
}

void mouth_clear(){
  for(int i=0; i<25; i++){
    M5.dis.drawpix(i, 0x000000); //black
  }
}

void mouth_close(){
  M5.dis.drawpix(11, 0xff0000);  //red
  M5.dis.drawpix(12, 0xff0000);
  M5.dis.drawpix(13, 0xff0000);
  M5.dis.drawpix(15, 0xff0000);
  M5.dis.drawpix(19, 0xff0000);
}

void mouth_open(){
  M5.dis.drawpix(1, 0xff0000);  //red
  M5.dis.drawpix(2, 0xff0000);
  M5.dis.drawpix(3, 0xff0000);
  M5.dis.drawpix(5, 0xff0000);
  M5.dis.drawpix(9, 0xff0000);
  M5.dis.drawpix(10, 0xff0000);
  M5.dis.drawpix(14, 0xff0000);
  M5.dis.drawpix(15, 0xff0000);
  M5.dis.drawpix(19, 0xff0000);
  M5.dis.drawpix(21, 0xff0000);
  M5.dis.drawpix(22, 0xff0000);
  M5.dis.drawpix(23, 0xff0000);
}

void mouth_bero(){
  M5.dis.drawpix(11, 0xff0000);  //red
  M5.dis.drawpix(12, 0xff0000);
  M5.dis.drawpix(13, 0xff0000);
  M5.dis.drawpix(15, 0xff0000);
  M5.dis.drawpix(19, 0xff0000);
  delay(100);
  M5.dis.drawpix(6, 0xff0000);  //red
  M5.dis.drawpix(7, 0xff0000);
  M5.dis.drawpix(8, 0xff0000);
  delay(100);
  M5.dis.drawpix(1, 0xff0000);  //red
  M5.dis.drawpix(2, 0xff0000);
  M5.dis.drawpix(3, 0xff0000);
}

void forward_step()
{
  mouth_clear();
  mouth_bero();
  for (int i=0; i <=38 ; i++){
    for (int j=0; j <=12 ; j++){
      ang1[j] = angZero[j] + f_s[i][j];
    }
  servo_set();
  }
  mouth_clear();
  mouth_close();
}

void left_step()
{
  mouth_clear();
  mouth_open();
  for (int i=0; i <=24 ; i++){
    for (int j=0; j <=12 ; j++){
      ang1[j] = angZero[j] + l_s[i][j];
    }
  servo_set();
  }
  mouth_clear();
  mouth_close();
}

void right_step()
{
  mouth_clear();
  mouth_open();
  for (int i=0; i <=24 ; i++){
    for (int j=0; j <=12; j++){
      ang1[j] = angZero[j] + r_s[i][j];
    }
  servo_set();
  }
  mouth_clear();
  mouth_close();
}

void back_step()
{
  mouth_clear();
  mouth_bero();
  for (int i=0; i <=38 ; i++){
    for (int j=0; j <=12 ; j++){
      ang1[j] = angZero[j] + b_s[i][j];
    }
  servo_set();
  }
  mouth_clear();
  mouth_close();
}

void left_side_step()
{
  mouth_clear();
  mouth_open();
  for (int i=0; i <=24 ; i++){
    for (int j=0; j <=12 ; j++){
      ang1[j] = angZero[j] + ls_s[i][j];
    }
  servo_set();
  }
  mouth_clear();
  mouth_close();
}

void right_side_step()
{
  mouth_clear();
  mouth_open();
  for (int i=0; i <=24 ; i++){
    for (int j=0; j <=12 ; j++){
      ang1[j] = angZero[j] + rs_s[i][j];
    }
  servo_set();
  }
  mouth_clear();
  mouth_close();
}

void left_head_step()
{
  mouth_clear();
  mouth_close();
  for (int i=0; i <=7 ; i++){
    for (int j=0; j <=12 ; j++){
      ang1[j] = angZero[j] + lh_s[i][j];
    }
  servo_set();
  }
}

void right_head_step()
{
  mouth_clear();
  mouth_close();
  for (int i=0; i <=7 ; i++){
    for (int j=0; j <=12 ; j++){
      ang1[j] = angZero[j] + rh_s[i][j];
    }
  servo_set();
  }
}

void servo_init_set()
{
  int cn = 5;
  for (int j=0; j <=12; j++){
     servo_write(j+3,angZero[j]+ angHome[j]);
     delay(cn);
  }
}

void servo_set()
{
  int a[13],b[13];

  for (int j=0; j <=12 ; j++){
      a[j] = ang1[j] - ang0[j];
      b[j] = ang0[j];
      ang0[j] = ang1[j];
  }
  
  for (int k=0; k <= td; k++){

      servo_write(3,a[0]*float(k)/td+b[0]);
      servo_write(4,a[1]*float(k)/td+b[1]);
      servo_write(5,a[2]*float(k)/td+b[2]);
      servo_write(6,a[3]*float(k)/td+b[3]);
      servo_write(7,a[4]*float(k)/td+b[4]);
      servo_write(8,a[5]*float(k)/td+b[5]);
      servo_write(9,a[6]*float(k)/td+b[6]);
      servo_write(10,a[7]*float(k)/td+b[7]);
      servo_write(11,a[8]*float(k)/td+b[8]);
      servo_write(12,a[9]*float(k)/td+b[9]);
      servo_write(13,a[10]*float(k)/td+b[10]);
      servo_write(14,a[11]*float(k)/td+b[11]);
      servo_write(15,a[12]*float(k)/td+b[12]);

      delay(ts/td);
  }
}

void setup() 
{ 
  // void M5Atom::begin(bool SerialEnable , bool I2CEnable , bool DisplayEnable )
  M5.begin(true, false, true);
  Serial.begin(151200);
  Dabble.begin("NX18_M5Atom");       //set bluetooth name of your device

  mouth_clear();
  mouth_open();

  Wire.begin(19, 22); //SDA-19, SCL-22
  
  pwm.begin();                   //initial setting (for 0x40) (PCA9685)
  pwm.setPWMFreq(50);            //PWM 50Hz (for 0x40) (PCA9685)

  //initial servo angle
  for (int j=0; j <=12 ; j++){
      ang0[j] = angZero[j] + angHome[j];
  }
  for (int j=0; j <=12 ; j++){
      ang1[j] = angZero[j] + angHome[j];
  }
  servo_init_set();

  mouth_clear();
  mouth_close();
} 
 
void loop() 
{   
  Dabble.processInput();             //this function is used to refresh data obtained from smartphone.Hence calling this function is mandatory in order to get data properly from your mobile.

  if (GamePad.isUpPressed())
  {
    forward_step();
    Serial.println("FWD");
  }

  if (GamePad.isDownPressed())
  {
    back_step();
    Serial.println("BACK");
  }

  if (GamePad.isLeftPressed())
  {
    left_step();
    Serial.println("LEFT STEP");
  }

  if (GamePad.isRightPressed())
  {
    right_step();
    Serial.println("RIGHT STEP");
  }
  
  if (GamePad.isSquarePressed())
  {
    left_side_step();
    Serial.println("Left Side");
  }

  if (GamePad.isCirclePressed())
  {
    right_side_step();
    Serial.println("RIGHT SIDE");
  }

  if (GamePad.isCrossPressed())
  {
    left_head_step();
    Serial.print("Left HEAD");
  }

  if (GamePad.isTrianglePressed())
  {
    right_head_step();
    Serial.print("Right HEAD");
  }

  delay(100);
} 
